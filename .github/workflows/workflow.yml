name: Tests

on:
  pull_request:
    branches:
      - main
      - releases/**
  push:
    branches:
      - main
      - releases/**

jobs:
  # Build and unit test
  build:
    strategy:
      matrix:
        os: [warp-ubuntu-latest-x64-16x, warp-ubuntu-latest-arm64-16x, warp-macos-14-arm64-6x]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: npm
    - run: npm ci
    - name: Prettier Format Check
      run: npm run format-check
    - name: ESLint Check
      run: npm run lint
    - name: Build & Test
      run: npm run test

  # End to end save and restore
  test-save:
    strategy:
      matrix:
        os: [warp-ubuntu-latest-x64-16x, warp-ubuntu-latest-arm64-16x, warp-macos-14-arm64-6x]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Generate files in working directory
      shell: bash
      run: __tests__/create-cache-files.sh ${{ runner.os }} test-cache
    - name: Generate files outside working directory
      shell: bash
      run: __tests__/create-cache-files.sh ${{ runner.os }} ~/test-cache
    - name: Save cache
      uses: ./
      with:
        key: test-${{ runner.os }}-${{ github.run_id }}
        path: |
          test-cache
          ~/test-cache
  test-restore:
    needs: test-save
    strategy:
      matrix:
        os: [warp-ubuntu-latest-x64-16x, warp-ubuntu-latest-arm64-16x, warp-macos-14-arm64-6x]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Restore cache
      uses: ./
      with:
        key: test-${{ runner.os }}-${{ github.run_id }}
        path: |
          test-cache
          ~/test-cache
    - name: Verify cache files in working directory
      shell: bash
      run: __tests__/verify-cache-files.sh ${{ runner.os }} test-cache
    - name: Verify cache files outside working directory
      shell: bash
      run: __tests__/verify-cache-files.sh ${{ runner.os }} ~/test-cache

  test-save-only:
    strategy:
      matrix:
        os: [warp-ubuntu-latest-x64-16x, warp-ubuntu-latest-arm64-16x, warp-macos-14-arm64-6x]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Generate files in working directory
      shell: bash
      run: __tests__/create-cache-files.sh ${{ runner.os }} test-cache
    - name: Generate files outside working directory
      shell: bash
      run: __tests__/create-cache-files.sh ${{ runner.os }} ~/test-cache
    - name: Save cache
      uses: ./save/
      with:
        key: test-save-only-${{ runner.os }}-${{ github.run_id }}
        path: |
          test-cache
          ~/test-cache

  test-restore-only:
    needs: test-save-only
    strategy:
      matrix:
        os: [warp-ubuntu-latest-x64-16x, warp-ubuntu-latest-arm64-16x, warp-macos-14-arm64-6x]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Restore cache
      uses: ./restore/
      with:
        key: test-save-only-${{ runner.os }}-${{ github.run_id }}
        path: |
          test-cache
          ~/test-cache
    - name: Verify cache files in working directory
      shell: bash
      run: __tests__/verify-cache-files.sh ${{ runner.os }} test-cache
    - name: Verify cache files outside working directory
      shell: bash
      run: __tests__/verify-cache-files.sh ${{ runner.os }} ~/test-cache


  # End to end with proxy
  test-proxy-save:
    runs-on: warp-ubuntu-latest-x64-16x
    container:
      image: ubuntu:latest
      options: --dns 127.0.0.1
      env:
        WARPBUILD_RUNNER_VERIFICATION_TOKEN: ${{ env.WARPBUILD_RUNNER_VERIFICATION_TOKEN }}
    services:
      squid-proxy:
        image: ubuntu/squid:latest
        ports:
          - 3128:3128
    env:
      https_proxy: http://squid-proxy:3128
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Generate files
      run: __tests__/create-cache-files.sh proxy test-cache
    - name: Save cache
      uses: ./
      with:
        key: test-proxy-${{ github.run_id }}
        path: test-cache
  test-proxy-restore:
    needs: test-proxy-save
    runs-on: warp-ubuntu-latest-x64-16x
    container:
      image: ubuntu:latest
      env:
        WARPBUILD_RUNNER_VERIFICATION_TOKEN: ${{ env.WARPBUILD_RUNNER_VERIFICATION_TOKEN }}
    services:
      squid-proxy:
        image: ubuntu/squid:latest
        ports:
          - 3128:3128
    env:
      https_proxy: http://squid-proxy:3128
    steps:
      # Wget is required by the WarpBuild Cache Action
    - name: Install wget
      run: apt-get update && apt-get install -y wget
    - name: Checkout
      uses: actions/checkout@v4
    - name: Restore cache
      uses: ./
      with:
        key: test-proxy-${{ github.run_id }}
        path: test-cache
    - name: Verify cache
      run: __tests__/verify-cache-files.sh proxy test-cache

  # The two tests below are used to test the save and restore from the default branch of a repo.
  save-or-restore-main-branch:
    if: github.ref == 'refs/heads/main'
    runs-on: warp-ubuntu-latest-x64-4x
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Generate files in working directory
      shell: bash
      run: __tests__/create-cache-files.sh ${{ runner.os }} test-cache
    - name: Generate files outside working directory
      shell: bash
      run: __tests__/create-cache-files.sh ${{ runner.os }} ~/test-cache
    - name: Save cache
      uses: ./
      with:
        key: test-save-main-branch
        path: |
          test-cache
          ~/test-cache

  test-restore-from-default-branch:
    if: github.ref != 'refs/heads/main'
    runs-on: warp-ubuntu-latest-x64-4x
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Restore cache
      uses: ./
      with:
        key: test-save-main-branch
